"use client";

import { Keypair, PublicKey } from "@solana/web3.js";
import { ellipsify } from "../../../ui/ui-layout";
import { ExplorerLink } from "../../../cluster/cluster-ui";
import {
  useLedgerProgram,
  useLedgerProgramAccount,
} from "../new-ledger/ledger-data-access";
import { useWallet } from "@solana/wallet-adapter-react";
import { useState } from "react";
import Link from "next/link";
import Head from "next/head";
import { BN } from "@coral-xyz/anchor";
import { useMutationState } from "@tanstack/react-query";

export default function TestComponent() {
  return (
    <button onClick={() => console.log("最小测试日志 -", Date.now())}>
      点击测试 Console
    </button>
  );
}
export function LedgerCreate() {
  const { createLedgerEntry } = useLedgerProgram();
  const [transactionType, setTransactionType] = useState("");
  const { publicKey } = useWallet();
  const [keeping_num, setKeeping_num] = useState(1);
  const [amount, setAmount] = useState<string>("0");
  const [category, setCategory] = useState<string[]>([]);
  const [accountType, setAccountType] = useState<string[]>([]);
  const [keeping_time, setKeeping_time] = useState(1);
  const [member, setMember] = useState("所有 / 156****2800");
  const [merchant, setMerchant] = useState("");
  const [project, setProject] = useState("");
  const [comment, setComment] = useState("");
  const [img, setImg] = useState("");

  [
    "食品酒水",
    "居家生活",
    "交流通讯",
    "休闲娱乐",
    "人情费用",
    "宝宝费用",
    "出差旅游",
  ];
  // 模拟数据
  const categories = ["餐饮", "交通", "购物", "娱乐", "医疗", "教育"];
  const accountTypes = ["现金", "支付宝", "微信钱包", "银行卡", "信用卡"];
  const merchants = ["超市", "餐厅", "网购平台", "加油站", "电影院"];
  const projects = ["家庭日常", "个人消费", "旅行", "投资", "还款"];

  // const isFormValid = amount.trim() !== "" && category.trim() !== "";
  const isFormValid = amount !== "" || !category || category.length === 0;

  // 调用示例
  // await createJournalEntry(
  //   99.99, // 金额
  //   [
  //     ["餐饮", "午餐"],
  //     ["交通", "出租车"],
  //   ], // 二级分类
  //   "支付宝",
  //   ["Alice", "Bob"],
  //   ["XX餐厅", "滴滴出行"],
  //   "家庭消费",
  //   "周末聚餐",
  //   "https://example.com/receipt.jpg"
  // );
  const handleSubmit = () => {
    console.log("钱包公钥:", publicKey?.toString());
    // let keeping_num =333;
    const keeping_num_BN = new BN(12);
    console.log("amountBN:");
    const amount_BN = new BN(11);
    const keeping_time_BN = new BN(11);
    console.log("amllllll");
    if (publicKey) {
      createLedgerEntry.mutateAsync({
        owner: publicKey,
        keeping_num: keeping_num_BN,
        amount: amount_BN,
        category,
        accountType,
        keeping_time: keeping_time_BN,
        member,
        merchant,
        project,
        comment,
        img,
      });
    }
    console.log("33333333333333");
  };

  if (!publicKey) {
    return (
      <div className="text-center p-8">
        <p className="text-lg text-gray-500">
          Connect your wallet to start journaling
        </p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <Head>
        <title>记账</title>
        <meta name="description" content="多功能记账应用" />
      </Head>

      <main className="container mx-auto py-6 px-4 max-w-2xl">
        {/* 顶部操作栏 */}
        <div className="flex justify-between mb-6">
          <div className="tabs tabs-boxed">
            <button className="tab tab-active">记一笔</button>
            <button className="tab">记多笔</button>
            {/*<button className="tab">数据导入</button>*/}
          </div>
        </div>

        {/* 交易类型选择 */}
        <div className="flex justify-around bg-white rounded-lg shadow p-2 mb-6">
          {["支出", "收入"].map((type) => (
            <button
              key={type}
              className={`btn btn-sm ${
                transactionType === type ? "btn-primary" : "btn-ghost"
              }`}
              onClick={() => setTransactionType(type)}
            >
              {type}
            </button>
          ))}
        </div>

        {/* 记账表单 */}
        <div className="bg-white rounded-lg shadow p-6">
          {/* 金额 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">金额*</span>
            </label>
            <input
              type="text"
              placeholder="输入金额"
              className="input input-bordered w-full"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              // onChange={(e) => {
              //   const value = e.target.value;
              //   // 只允许输入数字或空值
              //   if (value === "" || !isNaN(Number(value))) {
              //     setAmount(value === "" ? 0 : Number(value));
              //   }
              // }}
            />
          </div>

          {/* 分类 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">分类*</span>
            </label>
            <select
              className="select select-bordered w-full"
              value={category[0] || ""}
              onChange={(e) => setCategory([e.target.value])}
            >
              <option disabled value="">
                请选择
              </option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>
          </div>

          {/* 账户 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">账户*</span>
            </label>
            <select
              className="select select-bordered w-full"
              value={accountType[0] || ""}
              onChange={(e) => setAccountType([e.target.value])}
            >
              <option disabled value="">
                请选择
              </option>
              {accountTypes.map((acc) => (
                <option key={acc} value={acc}>
                  {acc}
                </option>
              ))}
            </select>
          </div>

          {/* 记账时间 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">记账时间</span>
            </label>
            <input
              type="text"
              className="input input-bordered w-full"
              value="2025-05-05 01:16:47"
              readOnly
            />
          </div>

          {/* 成员 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">成员*</span>
            </label>
            <input
              type="text"
              className="input input-bordered w-full"
              value={member}
              onChange={(e) => setMember(e.target.value)}
            />
          </div>

          {/* 商家 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">商家</span>
            </label>
            <select
              className="select select-bordered w-full"
              value={merchant}
              onChange={(e) => setMerchant(e.target.value)}
            >
              <option disabled value="">
                请选择
              </option>
              {merchants.map((m) => (
                <option key={m} value={m}>
                  {m}
                </option>
              ))}
            </select>
          </div>

          {/* 项目 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">项目</span>
            </label>
            <select
              className="select select-bordered w-full"
              value={project}
              onChange={(e) => setProject(e.target.value)}
            >
              <option disabled value="">
                请选择
              </option>
              {projects.map((p) => (
                <option key={p} value={p}>
                  {p}
                </option>
              ))}
            </select>
          </div>

          {/* 备注 */}
          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text font-bold">备注</span>
              <span className="label-text-alt">{comment.length}/50</span>
            </label>
            <textarea
              className="textarea textarea-bordered w-full"
              placeholder="请输入备注"
              rows={3}
              maxLength={50}
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            ></textarea>
          </div>

          {/* 图片上传 */}
          <div className="form-control mb-6">
            <label className="label">
              <span className="label-text font-bold">图片（最多9张）</span>
            </label>
            <div className="border-2 border-dashed rounded-lg p-8 text-center">
              <p className="text-gray-500">上传高清原图</p>
            </div>
          </div>

          {/* 操作按钮 */}
          <div className="flex justify-center space-x-4">
            {/* <button
              className="btn btn-primary px-8"
              onClick={handleSubmit}
              disabled={createLedgerEntry.isPending || !isFormValid}
            >
              保存
            </button> */}
            <button
              className={`btn px-8 disabled:bg-red-100 disabled:text-blue-500 ${
                createLedgerEntry.isPending
                  ? "btn-disabled  text-blue-500"
                  : "  hover:bg-stone-900 btn-primary"
              } transition-transform hover:-translate-y-1`}
              onClick={handleSubmit}
              disabled={createLedgerEntry.isPending || !isFormValid}
            >
              {createLedgerEntry.isPending ? (
                <span className="flex items-center justify-center">
                  <span className="tbloading loading loading-spinner mr-2"></span>
                  Creating...
                </span>
              ) : (
                "保存"
              )}
            </button>
            <button className="btn btn-outline px-8">保存并再记一笔</button>
          </div>
        </div>
      </main>
    </div>
  );
}

export function KeepingList() {
  const { accounts, getProgramAccount } = useLedgerProgram();

  if (getProgramAccount.isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="tbloading loading loading-spinner loading-lg text-purple-500"></span>
      </div>
    );
  }

  if (!getProgramAccount.data?.value) {
    return (
      <div className="flex justify-center alert alert-info max-w-2xl mx-auto">
        <span>
          Program account not found. Make sure you have deployed the program and
          are on the correct cluster.
        </span>
      </div>
    );
  }

  return (
    <div className="space-y-8 py-6">
      <h2 className="text-3xl font-bold text-gray-700 mb-4">
        我的DDDDDDDDDDDDDDDDDDD账本
      </h2>
      {accounts.isLoading ? (
        <div className="flex justify-center items-center h-64">
          <span className="tbloading loading loading-spinner loading-lg text-purple-500"></span>
        </div>
      ) : accounts.data?.length ? (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {accounts.data?.map((account: { publicKey: PublicKey; }) => (
            <>
              <LedgerCard
                key={account.publicKey.toString()}
                account={account.publicKey}
              />
              <h2>JJJJJJJrtJJJJJJJJJJJJJJJJJLLLLLLLLLLLLLLL</h2>
            </>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <h2 className="text-3xl font-bold text-gray-700 mb-4">
            No entries yet
          </h2>
          <p className="text-gray-500">
            Create your first ledger entry to get started
          </p>
        </div>
      )}
    </div>
  );
}

function LedgerCard({ account }: { account: PublicKey }) {
  const { accountQuery, updateEntry, deleteEntry } = useLedgerProgramAccount({
    account,
  });
  const title = accountQuery.data?.title;
  console.log("accountQueitle", accountQuery);

  const { createLedgerEntry } = useLedgerProgram();
  const [transactionType, setTransactionType] = useState("");
  const { publicKey } = useWallet();
  const [keeping_num, setKeeping_num] = useState(1);
  const [amount, setAmount] = useState<string>("0");
  const [category, setCategory] = useState<string[]>([]);
  const [accountType, setAccountType] = useState<string[]>([]);
  const [keeping_time, setKeeping_time] = useState(1);
  const [member, setMember] = useState("所有 / 156****2800");
  const [merchant, setMerchant] = useState("");
  const [project, setProject] = useState("");
  const [comment, setComment] = useState("");
  const [img, setImg] = useState("");

  const isFormValid = keeping_num > 0;

  const handleSubmit = () => {
    if (publicKey && isFormValid && title) {
      updateEntry.mutateAsync({
        owner: publicKey,
        keeping_num,
        amount,
        category,
        accountType,
        member,
        merchant,
        project,
        comment,
        img,
        keeping_time,
      });
    }
  };

  if (!publicKey) {
    return (
      <p className="text-center p-4 text-gray-500">
        Connect your wallet to view entries
      </p>
    );
  }

  return accountQuery.isLoading ? (
    <div className="flex justify-center items-center h-48">
      <span className="tbloading loading loading-spinner loading-lg text-purple-500"></span>
    </div>
  ) : (
    <div className="card bg-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-100 rounded-xl overflow-hidden">
      <div className="card-body p-6">
        <div className="space-y-4">
          <h2
            className="card-title text-2xl font-bold text-gray-800 cursor-pointer hover:text-purple-600 transition-colors"
            onClick={() => accountQuery.refetch()}
          >
            {accountQuery.data?.title}
          </h2>

          <p className="text-gray-600 min-h-16">{accountQuery.data?.message}</p>

          <div className="card-actions flex-col">
            <textarea
              placeholder="Update your Amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="textarea textarea-bordered w-full mb-3 focus:ring-2 focus:ring-purple-500 transition-all"
            />
            <button
              className={`btn btn-block ${
                updateEntry.isPending ? "btn-disabled" : "btn-primary"
              } mb-3 transition-transform hover:-translate-y-0.5`}
              onClick={handleSubmit}
              disabled={updateEntry.isPending || !isFormValid}
            >
              {updateEntry.isPending ? (
                <span className="flex items-center justify-center">
                  <span className="tbloading loading loading-spinner mr-2"></span>
                  Updating...
                </span>
              ) : (
                "Update LEDGER Entry"
              )}
            </button>
          </div>

          <div className="text-center space-y-3">
            <div className="text-sm text-gray-500">
              <ExplorerLink
                path={`account/${account}`}
                label={ellipsify(account.toString())}
                className="hover:text-purple-600 transition-colors"
              />
            </div>
            <button
              className="btn btn-sm btn-outline btn-error transition-transform hover:-translate-y-0.5"
              onClick={() => {
                if (
                  !window.confirm("Are you sure you want to delete this entry?")
                ) {
                  return;
                }
                const title = accountQuery.data?.title;
                if (title) {
                  return deleteEntry.mutateAsync(title);
                }
              }}
              disabled={deleteEntry.isPending}
            >
              {deleteEntry.isPending ? (
                <span className="flex items-center justify-center">
                  <span className="tbloading loading loading-spinner mr-2"></span>
                  Deleting...
                </span>
              ) : (
                "Delete Entry"
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
